# -*- coding: utf-8 -*-
"""Gaussian elimination Bryan Thanaya/2702334784

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y2HZfzQv9HYzYwaNKifuomTx_K1Ppcp3
"""

#Bryan Thanaya NIM: 2702334784#

import numpy as np

def gaussian_elimination(matrix):
    rows, cols = matrix.shape
    solution = np.zeros(cols - 1)
    results_matrix = np.zeros((rows, cols - 1))

    for i in range(cols - 1):
        for j in range(i + 1, rows):
            multiplier = matrix[j, i] / matrix[i, i]
            matrix[j] -= multiplier * matrix[i]

    for i in range(rows - 1, -1, -1):
        solution[i] = (matrix[i, -1] - np.dot(matrix[i, :-1], solution)) / matrix[i, i]
        results_matrix[i] = matrix[i, :-1]

    return solution, results_matrix

def print_solution(solution):
    print("Solution:")
    for i, x in enumerate(solution):
        print(f"x{i + 1} = {x:.4f}", end="; ")
    print()

def print_results_matrix(results_matrix):
    print("Results Matrix:")
    for row in results_matrix:
        print(row)

augmented_matrix = np.array([[3, -1 ,4 ,2],
                             [17, 2 ,1 ,14],
                             [1, 12, -7 ,54]], dtype=float)

solution, results_matrix = gaussian_elimination(augmented_matrix)

print_solution(solution)
print_results_matrix(results_matrix)